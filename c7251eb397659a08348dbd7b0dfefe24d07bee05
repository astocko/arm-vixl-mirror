{
  "comments": [
    {
      "key": {
        "uuid": "ba068154_cf05bdc3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T12:59:16Z",
      "side": 1,
      "message": "Could you keep the summary line a bit shorter please? We don\u0027t _enforce_ a strict summary length, but the same thing could be said more concisely:\n\n\"Add a PrintDisassembler::DecodeT32() variant.\"",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_8fdbb51a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T14:29:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba068154_cf05bdc3",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_0f106500",
        "filename": "src/aarch32/disasm-aarch32.cc",
        "patchSetId": 1
      },
      "lineNbr": 67292,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T12:59:16Z",
      "side": 1,
      "message": "s/value/opcode/\n\nIt\u0027s more specific, and therefore slightly clearer.",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_cf2c9d4d",
        "filename": "src/aarch32/disasm-aarch32.cc",
        "patchSetId": 1
      },
      "lineNbr": 67292,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T13:12:08Z",
      "side": 1,
      "message": "Yes, but opcode might in fact be the whole instruction, and that means we are going to get DecodeT32(opcode) below, which is confusing - why are we decoding only the opcode?\n\nI might change it to something such as instr, though, which implies that we are dealing with the whole.",
      "parentUuid": "ba068154_0f106500",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_2f928957",
        "filename": "src/aarch32/disasm-aarch32.cc",
        "patchSetId": 1
      },
      "lineNbr": 67292,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T13:43:53Z",
      "side": 1,
      "message": "Then, you\u0027ll have both \"instruction\" and \"instr\" in the same scope, which is somewhat distressing. \"opcode\" agrees with kLowestT32_32Opcode, at least.\n\nAlternatively, you could use \"address\" and \"instruction\". That would be fine.",
      "parentUuid": "ba068154_cf2c9d4d",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_ef87e10d",
        "filename": "src/aarch32/disasm-aarch32.cc",
        "patchSetId": 1
      },
      "lineNbr": 67292,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T13:54:25Z",
      "side": 1,
      "message": "instr_address instead of just address?",
      "parentUuid": "ba068154_2f928957",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_8fad758b",
        "filename": "src/aarch32/disasm-aarch32.cc",
        "patchSetId": 1
      },
      "lineNbr": 67292,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T14:22:20Z",
      "side": 1,
      "message": "Ok, though instruction_address would be better still.",
      "parentUuid": "ba068154_ef87e10d",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_6fc1312e",
        "filename": "src/aarch32/disasm-aarch32.cc",
        "patchSetId": 1
      },
      "lineNbr": 67292,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T14:29:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba068154_8fad758b",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_4ff9cdc7",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2479,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T12:59:16Z",
      "side": 1,
      "message": "Should the new method also be added to the parent (Disassembler) class?",
      "range": {
        "startLine": 2478,
        "startChar": 0,
        "endLine": 2479,
        "endChar": 33
      },
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_2f1d6910",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2479,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T13:12:08Z",
      "side": 1,
      "message": "The way I see it, it is the PrintDisassembler class that provides helpers for extracting functions out of buffers, nicely formatting output lines and so on, while the Disassembler class provides the basics (and deals only with uint32_t types). So, logically, the right place for the new DecodeT32() variant is the PrintDisassembler class.",
      "parentUuid": "ba068154_4ff9cdc7",
      "range": {
        "startLine": 2478,
        "startChar": 0,
        "endLine": 2479,
        "endChar": 33
      },
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_cf881d25",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2479,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T13:43:53Z",
      "side": 1,
      "message": "I don\u0027t follow. Couldn\u0027t the Disassembler be used directly? It looks like the design allows the Disassembler to be extended, perhaps with custom overloads of PrintOpcode* and the like. The basic Disassembler has the same Decode(A32|T32) methods that the PrintDisassembler does, except for the new one.",
      "parentUuid": "ba068154_2f1d6910",
      "range": {
        "startLine": 2478,
        "startChar": 0,
        "endLine": 2479,
        "endChar": 33
      },
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_4f7c2d21",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2479,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T13:54:25Z",
      "side": 1,
      "message": "The Disassembler class doesn\u0027t have the PrintOpcode* methods (or PrintPc() for that matter). I suppose the Disassembler could be used directly, but in ART we definitely need the PrintDisassembler (well, unless we want to reimplement the same functionality).\n\nTo be honest, based on my experience I suspect that most VIXL users will end up using the PrintDisassembler class, but whether it should exist as a separate entity is a completely different discussion.",
      "parentUuid": "ba068154_cf881d25",
      "range": {
        "startLine": 2478,
        "startChar": 0,
        "endLine": 2479,
        "endChar": 33
      },
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_afbb19c3",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2479,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T14:22:20Z",
      "side": 1,
      "message": "Actually, looking at the implementation a bit more closely, it seems that PrintDisassembler::DecodeT32 relies on Disassembler::DecodeT32, which does the actual decoding. VIXL32 doesn\u0027t have the separate Decoder class like VIXL64. In that case, I think your original approach makes the most sense; put the new DecodeT32 function in PrintDisassembler.",
      "parentUuid": "ba068154_4f7c2d21",
      "range": {
        "startLine": 2478,
        "startChar": 0,
        "endLine": 2479,
        "endChar": 33
      },
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_afd5d944",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2553,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2016-09-01T12:16:39Z",
      "side": 1,
      "message": "Would size_t make more sense as a return type here?",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_4fc42d92",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2553,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2016-09-01T12:28:43Z",
      "side": 1,
      "message": "Also, I think we need a different name for this method, as it has different semantics. Someone could accidentally call it.\n\nI\u0027m not sure what it should be called though, DecodeBufferT32 maybe, or DecodeT32At.",
      "parentUuid": "ba068154_afd5d944",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_cf377daf",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2553,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T12:36:20Z",
      "side": 1,
      "message": "It would, but I was being consistent with Disassembler::T32Size().",
      "parentUuid": "ba068154_afd5d944",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_ef46c122",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2553,
      "author": {
        "id": 1000234
      },
      "writtenOn": "2016-09-01T12:36:20Z",
      "side": 1,
      "message": "The compiler won\u0027t allow an accidental mixup between pointer and integer, will it? Someone will have to write an explicit cast, which seems doubtful to be by accident. Not that I am opposed to renaming it (although I do like keeping it as it is), except that DecodeBufferT32() is a bad idea (we are decoding exactly one instruction, not a buffer of instructions).",
      "parentUuid": "ba068154_4fc42d92",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_8f6c559e",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 2553,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-09-01T12:50:27Z",
      "side": 1,
      "message": "`int` is better than `size_t` here, at least for VIXL. The value will always be a small immediate. If it\u0027s used in some size_t calculation, it will be extended accordingly. If we returned `size_t`, it can\u0027t necessarily be used in an `int` calculation without compiler warnings about narrowing (depending on the context).\n\nhttps://google.github.io/styleguide/cppguide.html#Integer_Types\n\nI\u0027m also not too worried about the naming; the argument type makes it unambiguous and I think the operation is clear. Others might disagree though.",
      "parentUuid": "ba068154_ef46c122",
      "revId": "c7251eb397659a08348dbd7b0dfefe24d07bee05",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    }
  ]
}