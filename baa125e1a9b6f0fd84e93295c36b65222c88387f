{
  "comments": [
    {
      "key": {
        "uuid": "ba068154_aaf4c387",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1580,
      "author": {
        "id": 1000226
      },
      "writtenOn": "2016-07-12T17:09:51Z",
      "side": 1,
      "message": "This should probably be unimplemented not unreachable",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_ea7d2bb3",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1580,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T08:15:33Z",
      "side": 1,
      "message": "Until we define it, moving between a core to FP register has no meaning. Does it mean moving exact bits? Does it mean converting? If so with what rounding mode?\nSo I think it is correct to have UNREACHABLE here. If we define what the behaviour should be then it can become UNIMPLEMENTED.",
      "parentUuid": "ba068154_aaf4c387",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_25792494",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1580,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-07-13T10:34:50Z",
      "side": 1,
      "message": "\"Move\" implies a bitwise move, with no conversion. For example, this function could be used to implement something similar to AAarch32\u0027s softfp calling convention. We don\u0027t have that case here, but that doesn\u0027t mean that a user might not want to have something like it for whatever reason. I think this should be UNIMPLEMENTED.",
      "parentUuid": "ba068154_ea7d2bb3",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_25a004f4",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1580,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T10:54:49Z",
      "side": 1,
      "message": "Ok fine with me.",
      "parentUuid": "ba068154_25792494",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_aa78432c",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1587,
      "author": {
        "id": 1000222
      },
      "writtenOn": "2016-07-12T17:11:01Z",
      "side": 1,
      "message": "Why a VRegister?",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_4a4a7784",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1587,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T08:15:33Z",
      "side": 1,
      "message": "`Register` would be fine as well. I used `VRegister` with the assumption that there is generally less pressure on them, ie. would less often take the scratch from VIXL.\nI will improve it to check what scratch registers (both core and FP) are available.",
      "parentUuid": "ba068154_aa78432c",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_856e10c8",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1587,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-07-13T10:34:50Z",
      "side": 1,
      "message": "Perhaps we should have an AcquireCPURegisterOfSize for cases like this, were we don\u0027t actually care which bank the register comes from.",
      "parentUuid": "ba068154_4a4a7784",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_65aa0cd6",
        "filename": "src/aarch64/macro-assembler-aarch64.cc",
        "patchSetId": 5
      },
      "lineNbr": 1587,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T10:54:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba068154_856e10c8",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_4a2b97eb",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 860,
      "author": {
        "id": 1000222
      },
      "writtenOn": "2016-07-12T17:11:01Z",
      "side": 1,
      "message": "I\u0027m not sure about \"Location\"; I originally thought this patch was going to be about Label. How about \"Slot\"?",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_2a4f3394",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 860,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T08:15:33Z",
      "side": 1,
      "message": "I did not spend too much time thinking about the name, knowing that we would have this discussion!\n\nI don\u0027t like \"Slot\" much because to me it sounds like it refers to a memory location, whereas this can also be a register.",
      "parentUuid": "ba068154_4a2b97eb",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_e5471c4a",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 860,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-07-13T10:34:50Z",
      "side": 1,
      "message": "The same argument applies to \"Location\", though. To me, that sounds even more memory-focussed.\n\nTo be clear, I don\u0027t really like \"Slot\" either, but it\u0027s the best we could come up with.",
      "parentUuid": "ba068154_2a4f3394",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_c5ae58e7",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 860,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T10:54:49Z",
      "side": 1,
      "message": "Really. I felt `Location` was less memory-focussed. I\u0027ll come to have a chat. This can be fixed by a simple search and replace.",
      "parentUuid": "ba068154_e5471c4a",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_0af22f9a",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 872,
      "author": {
        "id": 1000226
      },
      "writtenOn": "2016-07-12T17:09:51Z",
      "side": 1,
      "message": "did you intend to use bitwise operator with boolean. It will work though.",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_8a445f75",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 872,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T08:15:33Z",
      "side": 1,
      "message": "I did. I find it more concise than expressing this with boolean operators only.",
      "parentUuid": "ba068154_0af22f9a",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_4574289c",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 872,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-07-13T10:34:50Z",
      "side": 1,
      "message": "Although this will work, I find it somewhat surprising because of the types involved. Instead, why not use \"!\u003d\"?\n\n    return cpu_register_.IsValid() !\u003d mem_op_.IsValid();",
      "parentUuid": "ba068154_8a445f75",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba068154_a5ab54d5",
        "filename": "src/aarch64/operands-aarch64.h",
        "patchSetId": 5
      },
      "lineNbr": 872,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-07-13T10:54:49Z",
      "side": 1,
      "message": "My bad. Sorry.",
      "parentUuid": "ba068154_4574289c",
      "revId": "baa125e1a9b6f0fd84e93295c36b65222c88387f",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    }
  ]
}