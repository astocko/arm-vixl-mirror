{
  "comments": [
    {
      "key": {
        "uuid": "7af0899e_620af0d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-10-26T09:51:36Z",
      "side": 1,
      "message": "Nit: Upper case and full stop.",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_a21178ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T15:33:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7af0899e_620af0d3",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_82055cc4",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-10-26T09:51:36Z",
      "side": 1,
      "message": "It feels off to have to include the assembler header in the disassembler. Should `InstructionType` and `InstructionClass` be in some other header (instructions-aarch32.h?) so that one does not need to include the assembler header?",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_621790a4",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T15:33:06Z",
      "side": 1,
      "message": "The assembler is the main product. The disassembler is an extra product which can depend on the assembler (but the assembler must not depend on the disassembler).\nI really think InstructionType is at the right location.",
      "parentUuid": "7af0899e_82055cc4",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_026dec32",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-10-26T16:14:49Z",
      "side": 1,
      "message": "I\u0027m not sure where you got that idea from. Some users of VIXL are using the disassembler but not the assembler. We should aim to keep VIXL as modular as possible, and that includes avoiding dependencies between the disassembler and assembler.",
      "parentUuid": "7af0899e_621790a4",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_227468fc",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T16:19:58Z",
      "side": 1,
      "message": "You can still use only the disassembler. The compiler will have some work to parse all the assembler include but it will only keep the enum we need.\nMy understanding was that VIXL is a monolithic library for which you can use only one of its components.",
      "parentUuid": "7af0899e_026dec32",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    }
  ]
}