{
  "comments": [
    {
      "key": {
        "uuid": "7af0899e_620af0d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-10-26T09:51:36Z",
      "side": 1,
      "message": "Nit: Upper case and full stop.",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_a21178ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T15:33:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7af0899e_620af0d3",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_82055cc4",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-10-26T09:51:36Z",
      "side": 1,
      "message": "It feels off to have to include the assembler header in the disassembler. Should `InstructionType` and `InstructionClass` be in some other header (instructions-aarch32.h?) so that one does not need to include the assembler header?",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_621790a4",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T15:33:06Z",
      "side": 1,
      "message": "The assembler is the main product. The disassembler is an extra product which can depend on the assembler (but the assembler must not depend on the disassembler).\nI really think InstructionType is at the right location.",
      "parentUuid": "7af0899e_82055cc4",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_026dec32",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-10-26T16:14:49Z",
      "side": 1,
      "message": "I\u0027m not sure where you got that idea from. Some users of VIXL are using the disassembler but not the assembler. We should aim to keep VIXL as modular as possible, and that includes avoiding dependencies between the disassembler and assembler.",
      "parentUuid": "7af0899e_621790a4",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_227468fc",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T16:19:58Z",
      "side": 1,
      "message": "You can still use only the disassembler. The compiler will have some work to parse all the assembler include but it will only keep the enum we need.\nMy understanding was that VIXL is a monolithic library for which you can use only one of its components.",
      "parentUuid": "7af0899e_026dec32",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_c25ac482",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-10-26T16:23:25Z",
      "side": 1,
      "message": "You shouldn\u0027t have to include and depend upon the disassembler header, though. The dependency tree might be simple now but forbidding the inclusion of the header makes it much easier to keep the dependencies under control.\n\nOn top of that, instructions-aarch32.h seems to be a more sensible place for InstructionType and InstructionClass anyway; they\u0027re instruction properties, not assembly functions.",
      "parentUuid": "7af0899e_227468fc",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_0254cc52",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T16:23:40Z",
      "side": 1,
      "message": "Maybe the right location to put InstructionType and InstructionClass is in the Instructions class from which Assembler and Disassembler used to inherit. It has been removed because it was, at this time, empty.\nIf we don\u0027t put back the Instructions class, I don\u0027t see another semantically correct location for InstructionType and InstructionClass.",
      "parentUuid": "7af0899e_227468fc",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_62ccb036",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-10-26T16:28:28Z",
      "side": 1,
      "message": "Surely they could just be free types, couldn\u0027t they? vixl::aarch32::InstructionType makes more sense than vixl::aarch32::Assembler::InstructionType.\n\nI wasn\u0027t involved with (or don\u0027t remember) the discussions about removing the Instruction class. The Instruction class in VIXL-AArch64 isn\u0027t a parent of either the Assembler or the Disassembler. Logically, it shouldn\u0027t be a parent.",
      "parentUuid": "7af0899e_0254cc52",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_02db2cee",
        "filename": "src/aarch32/disasm-aarch32.h",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-26T17:30:51Z",
      "side": 1,
      "message": "Yes I can put them directly in instructions-aarch32.h\n\nSemantically, Assembler and Disassembler should inherit from a common class as they share the same CPU definition but I\u0027m find keeping everything directly in instructions-aarch32.h",
      "parentUuid": "7af0899e_62ccb036",
      "revId": "ea81a4fca25a6525502a9f29d294922ed0345958",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    }
  ]
}