{
  "comments": [
    {
      "key": {
        "uuid": "7af0899e_25e4723a",
        "filename": "src/aarch32/assembler-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-10-27T10:25:27Z",
      "side": 1,
      "message": "This feels wrong to me. What if the label actually has to be bound within an `AssemblerAccurateScope`?\n\n\nIn one code generation stub:\n\n    Label* target \u003d GetLabelFor(...);\n    __ Cbz(reg, block_entry);\n    \nIn another:\n\n    // We want to emit some critical code here.\n    {\n      AssembleAccurateScope scope(...);\n      __ ldr(...);\n      __ add(...);\n      // Bind the same label as `target` above.\n      // We cannot use `Bind` because we are in an accurate scope.\n      __ bind(GetLabelFor(...));\n      __ sub(...);\n      __ str(...);\n    }\n\nThe first idea I had to solve this was to let the label have a pointer to the the veneer pool tracking it (NULL if not tracked). And in `Assembler::bind` we call back the veneer pool if necessary to get rid of the info for that label.",
      "revId": "d3ebf534ceceb34d5f5d7e2b6655c48d37c9ded7",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_c5e76ee3",
        "filename": "src/aarch32/assembler-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000221
      },
      "writtenOn": "2016-10-27T16:04:47Z",
      "side": 1,
      "message": "Mixing assembler and macro-assembler as you do here seems a bad idea. In your case, I would write:\n{\n  AssembleAccurateScope scope(...);\n  __ ldr(...);\n  __ add(...);\n}\n      // Bind the same label as `target` above.\n__ Bind(GetLabelFor(...));\n{\n  AssembleAccurateScope scope(...);\n  __ sub(...);\n  __ str(...);\n}\n\nAssemblerAccurateScope should be used only for small independent chunks of code. Putting a label which can be used from outside the scope breaks this.\n\nI should recommend that if you bind a label within an AssemblerAccurateScope, it can only be used within the same scope.",
      "parentUuid": "7af0899e_25e4723a",
      "revId": "d3ebf534ceceb34d5f5d7e2b6655c48d37c9ded7",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_a55fc271",
        "filename": "src/aarch32/assembler-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000225
      },
      "writtenOn": "2016-10-28T08:26:39Z",
      "side": 1,
      "message": "With your suggestion there could be emission of pools between the two pieces of code.\n\nI just put up an random example illustrate the question. Are we sure (or convinced enough) that there is no valid use-case for binding the label (that we branch to from \u0027outside\u0027) in the middle of an assembler accurate sequence?",
      "parentUuid": "7af0899e_c5e76ee3",
      "revId": "d3ebf534ceceb34d5f5d7e2b6655c48d37c9ded7",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af0899e_05db36ee",
        "filename": "src/aarch32/assembler-aarch32.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2016-10-28T08:54:27Z",
      "side": 1,
      "message": "Indeed, both starting and ending a scope could trigger the emission of pools (or anything else) into the code.\n\nWe know of use-cases where long-lived labels need to be bound inside InstructionAccurateScopes; this is a basic requirement for instruction patching, for example. It\u0027s only a very small step to go from there to branching to it. The V8 deoptimisation mechanism comes very close to doing this. It uses calculated offsets, but a Label-based approach would be quite a reasonable implementation.\n\nI\u0027m happy to accept this patch now because it catches a bug that otherwise would have been hidden, but I think we should really support a consistent usage for Labels; they should work consistently irrespective of what they\u0027re bound to.",
      "parentUuid": "7af0899e_a55fc271",
      "revId": "d3ebf534ceceb34d5f5d7e2b6655c48d37c9ded7",
      "serverId": "f33910f19b7abb192b83adbd000000bf",
      "unresolved": false
    }
  ]
}